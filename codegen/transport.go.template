package api

import (
	"context"

	grpctransport "github.com/go-kit/kit/transport/grpc"
  "github.com/go-kit/kit/auth/jwt"
  kitlog "github.com/go-kit/log"

	proto "%proto_path"
)

type grpcServer struct {
	proto.Unimplemented%service_nameAPIServer
[[
	%sEP grpctransport.Handler
]]
}

// NewGrpcTransport definition
func NewGrpcTransport(ep *Endpoints, logger kitlog.Logger) proto.%service_nameAPIServer {
	options := []grpctransport.ServerOption{
		//grpctransport.ServerErrorHandler(logger),
    grpctransport.ServerBefore(jwt.GRPCToContext()),
	}

	return &grpcServer{
[[
		%sEP: grpctransport.NewServer(
			ep.%sEP,
			decode%sRequest,
			encode%sResponse,
			options...,
		),
]]
	}
}

[[
func (s *grpcServer) %s(ctx context.Context, req *proto.%sRequest) (*proto.%sResponse, error) {
	_, rep, err := s.%sEP.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*proto.%sResponse), nil
}

func decode%sRequest(ctx context.Context, r interface{}) (interface{}, error) {
	req := r.(*proto.%sRequest)
	return %lRequest{Request: req}, nil
}

func encode%sResponse(ctx context.Context, r interface{}) (interface{}, error) {
	resp := r.(%lResponse)
	return resp.Response, nil
}

]]
