package api

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/log"
  "github.com/go-kit/kit/transport"

	proto "%proto_path"
	"github.com/Posrabi/flashy/backend/middleware"
)

// Endpoints struct
type Endpoints struct {
[[
	%sEP endpoint.Endpoint
]]
}

// CreateEndpoints creates endpoints
func CreateEndpoints(s Service, logger log.Logger) *Endpoints {
    handler := middleware.NewLogErrorHandler(logger)

[[
	var %sEP endpoint.Endpoint
	{
		%sEP = make%sEndpoint(s, handler)
		if middleware.EndpointAuthMap["%s"] > middleware.AuthLevel_NONE {
			%sEP = middleware.NewJWTParser(logger)(%sEP)
		}
		%sEP = middleware.AddRequestToContext("%s")(%sEP)
		%sEP = middleware.LoggingMiddleware(log.With(logger, "action", %sEP))(%sEP)
	}
]]
	return &Endpoints{
[[
	    %sEP: %sEP,
]]
	}
}

[[
type %lRequest struct {
	Request *proto.%sRequest
}

type %lResponse struct {
	Response *proto.%sResponse
}

]]

[[
func make%sEndpoint(s Service, handler transport.ErrorHandler) endpoint.Endpoint {
	return func(ctx context.Context, r interface{}) (interface{}, error) {
		req := r.(%lRequest)
		resp, err := s.%s(ctx, req.Request)
    if err != nil {
      handler.Handle(ctx, err)
    }
		return %lResponse{Response: resp}, err
	}
}

]]
